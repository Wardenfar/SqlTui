[driver.psql]
full_name = "postgresql"
root = "server"

[psql.node.server]
color = "#ff0000"
children_array = [
    ['databases', 'Databases'],
    ['users', 'Users And Roles'],
]

[psql.node.users]
color = "#ffff00"
children_query = ["server", "SELECT r.rolname, CONCAT( r.rolname, ' ', CASE WHEN r.rolsuper IS true THEN '[Super]' ELSE '[]' END ) FROM pg_catalog.pg_roles r WHERE r.rolname !~ '^pg_' ORDER BY r.rolname;"]
children_type = "user"
extra_children = [
    ["<Add User>", "white", "server", "CREATE USER ${Username} with encrypted password ${Password:text};"]
]

[psql.node.user]
color = "#ffffff"
actions = [
    ["Grant SuperUser", "server", "ALTER USER #{user} WITH SUPERUSER;"],
    ["Grant Database", "server", "GRANT ALL PRIVILEGES ON DATABASE ${Database:id} TO #{user};"],
    ["Revoke Database", "server", "REVOKE ALL PRIVILEGES ON DATABASE ${Database:id} FROM #{user};"],
    ["Remove SuperUser", "server", "ALTER USER #{user} WITH NOSUPERUSER;"],
    ["Drop", "server", "DROP USER #{user};"]
]

[psql.node.databases]
color = "#ff00ff"
children_query = ["server", "SELECT datname FROM pg_database WHERE datistemplate = false;"]
children_type = "database"
extra_children = [
    ["<Add Database>", "white", "server", "CREATE DATABASE ${Database name:id};"]
]
open = true

[psql.node.database]
color = "#ffff00"
children_query = ["database", "SELECT nspname FROM pg_catalog.pg_namespace WHERE nspname NOT LIKE 'pg_%' AND nspname <> 'information_schema';"]
children_type = "schema"
extra_children = [
    ["<Add Schema>", "white", "database", "CREATE SCHEMA ${Schema name:id};"]
]
open = ["database", ""]

[psql.node.schema]
color = "#34cceb"
children_array = [
    ['tables', 'Tables'],
    ['views', 'Views'],
    ['functions', 'Functions'],
]
open = ["database", "SET search_path = #{schema:id};\n"]


[psql.node.tables]
color = "#00ffff"
children_query = ["database", " SELECT sub.table_name, CONCAT(sub.table_name, ' [', (xpath('/row/cnt/text()', sub.xml_count))[1]::text, ']') FROM ( SELECT table_name, table_schema, query_to_xml(format('select count(*) as cnt from %I.%I', table_schema, table_name), false, true, '') as xml_count FROM information_schema.tables WHERE table_schema = #{schema:text} ) AS sub;"]
children_type = "table"
extra_children = [
    ["<Add Table>", "white", "database", "CREATE TABLE #{schema:id}.${Table Name:id} (${Columns Definition});"]
]

[psql.node.table]
color = "#00ffff"
children_query = ["database", "SELECT column_name, CONCAT(column_name, ' [', data_type, ']') FROM information_schema.columns WHERE table_schema = #{schema:text} AND table_name = #{table:text} ORDER BY column_name;"]
children_type = "table_column"
extra_children = [
    ["<Add Column>", "white", "database", "ALTER TABLE #{schema:id}.#{table:id} ADD COLUMN ${Column Name:id} ${Column Type};"]
]
actions = [
    ["Count", "database", "SELECT COUNT(*) FROM #{schema:id}.#{table:id};"],
    ["Select Limit", "database", "SELECT * FROM #{schema:id}.#{table:id} LIMIT ${Limit};"],
    ["Select All", "database", "SELECT * FROM #{schema:id}.#{table:id};"],
    ["Select ? Where ?", "database", "SELECT ${Columns} FROM #{schema:id}.#{table:id} WHERE ${Where};"],
    ["Insert One", "database", "INSERT INTO #{schema:id}.#{table:id} (${Columns}) VALUES (${Values});"],
    ["Delete Where ?", "database", "DELETE FROM #{schema:id}.#{table:id} WHERE ${Where};"],
    ["Drop Table", "database", "DROP TABLE #{schema:id}.#{table:id};"]
]

[psql.node.views]
color = "#ff00ff"
children_query = ["database", "SELECT sub.table_name, CONCAT(sub.table_name, ' [', (xpath('/row/cnt/text()', sub.xml_count))[1]::text, ']') FROM ( SELECT table_name, table_schema, query_to_xml(format('select count(*) as cnt from %I.%I', table_schema, table_name), false, true, '') as xml_count FROM information_schema.views WHERE table_schema = #{schema:text} ) AS sub;"]
children_type = "view"
extra_children = [
    ["<Add View AS ?>", "white", "database", "CREATE VIEW #{schema:id}.${View Name:id} AS ${AS Query};"]
]

[psql.node.view]
color = "#ff00ff"
children_query = ["database", "SELECT column_name, CONCAT(column_name, ' [', data_type, ']')  FROM information_schema.columns  WHERE table_schema = #{schema:text}  AND table_name = #{view:text} ORDER BY column_name;"]
children_type = "view_column"
extra_children = [
    ["<Add Column>", "white", "database", "ALTER TABLE #{schema:id}.#{view:id} ADD COLUMN ${Column Name:id} ${Column Type};"]
]
actions = [
    ["Count", "database", "SELECT COUNT(*) FROM #{schema:id}.#{view:id};"],
    ["Select Limit", "database", "SELECT * FROM #{schema:id}.#{view:id} LIMIT ${Limit};"],
    ["Select All", "database", "SELECT * FROM #{schema:id}.#{view:id};"],
    ["Select ? Where ?", "database", "SELECT ${Columns} FROM #{schema:id}.#{view:id} WHERE ${Where};"],
    ["Insert One", "database", "INSERT INTO #{schema:id}.#{view:id} (${Columns}) VALUES (${Values});"],
    ["Show Definition", "database", "SELECT definition FROM pg_views WHERE schemaname = #{schema:text} AND viewname = #{view:text}"],
    ["Replace View AS ?", "database", "DROP VIEW IF EXISTS #{schema:id}.#{view:id};CREATE VIEW #{schema:id}.#{view:id} AS ${As Query};"]
]

[psql.node.table_column]
color = "#ffffff"
actions = [
    ["Select Distinct Values", "database", "SELECT DISTINCT #{table_column:id} FROM #{table:id};"],
    ["Select All Values", "database", "SELECT #{table_column:id} FROM #{table:id};"]
]

[psql.node.view_column]
color = "#ffffff"
actions = [
    ["Select Distinct Values", "database", "SELECT DISTINCT #{view_column:id} FROM #{view:id};"],
    ["Select All Values", "database", "SELECT #{view_column:id} FROM #{view:id};"]
]

[psql.node.functions]
color = "#ffaaaa"
children_query = ["database", "SELECT routines.routine_name FROM information_schema.routines WHERE routines.specific_schema = #{schema:text} GROUP BY routines.routine_name ORDER BY routines.routine_name;"]
children_type = "function"
extra_children = [
    ["<Add Function AS ?>", "white", "database", "CREATE VIEW #{schema:id}.${View Name:id} AS ${AS Query};"]
]

[psql.node.function]
color = "#ffffff"